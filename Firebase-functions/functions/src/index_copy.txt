// importar as funcionalidades do firebase functions, apelidando de 'functions';
import * as functions from "firebase-functions";
import * as admin from "firebase-admin";

// OBJETOS CONSTANTES

// criar objetos const fora da function pois vai usar em várias
// const app recebe o retorno do método "initializeApp" de admin
// inicializa o app do firebase, nao precisa passar nenhum parâmetro
const app = admin.initializeApp();

const db = app.firestore(); // chamada do banco de dados

// collection do firestore, caso nao tenha, ele cria;
const colLockets = db.collection("lockets");

// FUNCAO - ADICIONAR um armario de exemplo
// definir regiao
// funciona como uma API, com requisição e resposta
// funcao do tipo async, pois não há resposta imediata, precisa aguardar
// docRef é a referencia do documento no firestore
export const addSampleLocket = functions
  .region("southamerica-east1")
  .https.onRequest(async (request, response) => {
    const armario = {
      largura: 27,
      altura: 43,
      profundidade: 70,
      marca: "aaaaa",
      precoHora: 30.00,
    };
    try {
      const docRef = await colLockets.add(armario);
      response.send("Armario exemplo inserido. Referencia: " + docRef.id);
    } catch (e) {
      functions.logger.error("Erro ao inserir o armario de exemplo.");
      response.send("Erro ao inserir o armario de exemplo");
    }
  }); // https://southamerica-east1-projetointegrador3-415600.cloudfunctions.net/addSampleLocket

// Para implementar a funcao:
// terminal -> "firebase deploy --only functions:[nome da func]"

// FUNCAO - ADICIONAR um armario de exemplo

export const addSampleLUnity = functions
  .region("southamerica-east1")
  .https.onRequest(async (request, response) => {
    const unidadeLoc = {
      latitude: 30,
      longitude: 50,
      precoHora: 30.00,
    };
    try {
      const docRef = await colLockets.add(unidadeLoc);
      response.send("Unidade de loc exemplo inserido.Referencia: " + docRef.id);
    } catch (e) {
      functions.logger.error("Erro ao inserir a unidade de exemplo.");
      response.send("Erro ao inserir o armario de exemplo");
    }
  });

export const addSamplePessoa = functions
  .region("southamerica-east1")
  .https.onRequest(async (request, response) => {
    const pessoas = {
      nome: "joaozinho",
      idade: 18,
    };
    try {
      const docRef = await colPessoas.add(pessoas);
      response.send("Pessoa exemplo inserida. Referencia: " + docRef.id);
    } catch (e) {
      functions.logger.error("Erro ao inserir  de exemplo.");
      response.send("Erro ao inserir  de exemplo");
    }
  });
// FUNCAO - EXCLUIR UM ARMARIO DE ID ESPECIFICO
export const deleteLocker = functions
  .region("southamerica-east1")
  .https.onRequest(async (request, response) => {
    const locketId = "Z04CgeWf2T5m65QHyHbW";
    await colLockets.doc(locketId).delete();
    response.send("Exclusão - provavelmente - realizada");
  });

// BUSCA NO FIRESTORE
export const showLockets40d = functions
  .region("southamerica-east1")
  .https.onRequest(async (request, response) => {
    // busca de armarios de profundidade == 70
    const lockets : FirebaseFirestore.DocumentData = []; // array vazio
    // foto do bd, retorna promise pelo metodo get
    const snapshot = await colLockets.where("profundidade", "==", 70).get();
    snapshot.forEach((doc) => {
      lockets.push(doc.data());
    });
    response.status(200).json(lockets);
  });

// https://southamerica-east1-projetointegrador3-415600.cloudfunctions.net/showLockets40d

/*
export const showLUnities30h = functions
  .region("southamerica-east1")
  .https.onRequest(async (request, response) => {
    const snapshot = await  col
  })
*/
